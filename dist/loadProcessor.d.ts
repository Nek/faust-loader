export default function loadProcessor(context: AudioContext, name: string, baseURL: string): Promise<{
    json: string;
    json_object: Record<string, any>;
    parse_ui: (ui: any, obj: any) => void;
    parse_group: (group: any, obj: any) => void;
    parse_items: (items: any, obj: any) => void;
    output_handler: any;
    inputs_items: any[];
    outputs_items: any[];
    descriptor: any[];
    fPitchwheelLabel: any[];
    fCtrlLabel: any[];
    baseURL: string;
    gui: any;
    presets: any;
    handleMessage(event: any): void;
    destroy(): void;
    getJSON(): string;
    getMetadata(): Promise<unknown>;
    setParamValue(path: any, val: any): void;
    setParam(path: any, val: any): void;
    getParamValue(path: string): number;
    getParam(path: string): number;
    setOutputParamHandler(handler: any): void;
    getOutputParamHandler(): any;
    getNumInputs(): number;
    getNumOutputs(): number;
    inputChannelCount(): number;
    outputChannelCount(): number;
    getParams(): any[];
    getDescriptor(): {};
    ctrlChange(channel: any, ctrl: any, value: any): void;
    pitchWheel(channel: any, wheel: any): void;
    midiMessage(data: any): void;
    onMidi(data: any): void;
    getState(): Promise<unknown>;
    setState(state: any): Promise<unknown>;
    setPatch(patch: any): void;
    onprocessorerror: (this: AudioWorkletNode, ev: Event) => any;
    readonly parameters: AudioParamMap;
    readonly port: MessagePort;
    addEventListener<K extends "processorerror">(type: K, listener: (this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K_1 extends "processorerror">(type: K_1, listener: (this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    channelCount: number;
    channelCountMode: ChannelCountMode;
    channelInterpretation: ChannelInterpretation;
    readonly context: BaseAudioContext;
    readonly numberOfInputs: number;
    readonly numberOfOutputs: number;
    connect(destinationNode: AudioNode, output?: number, input?: number): AudioNode;
    connect(destinationParam: AudioParam, output?: number): void;
    disconnect(): void;
    disconnect(output: number): void;
    disconnect(destinationNode: AudioNode): void;
    disconnect(destinationNode: AudioNode, output: number): void;
    disconnect(destinationNode: AudioNode, output: number, input: number): void;
    disconnect(destinationParam: AudioParam): void;
    disconnect(destinationParam: AudioParam, output: number): void;
    dispatchEvent(event: Event): boolean;
}>;
